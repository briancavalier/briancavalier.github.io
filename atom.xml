<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[technorthodox]]></title>
  <link href="http://briancavalier.github.io/atom.xml" rel="self"/>
  <link href="http://briancavalier.github.io/"/>
  <updated>2013-04-22T12:05:23-04:00</updated>
  <id>http://briancavalier.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Async Programming Part 2: Promises]]></title>
    <link href="http://briancavalier.github.io/async-programming-part-2-promises/"/>
    <updated>2012-02-22T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/async-programming-part-2-promises</id>
    <content type="html"><![CDATA[<p>In <a href="http://briancavalier.github.io/async-programming-part-1-its-messy">Part 1</a>, we looked at the awkward situation created when we introduce callbacks to handle even a single asynchronous operation into an otherwise simple set of function calls.</p>

<p>As a quick review, have a look back at the <a href="https://gist.github.com/1790802">code we started with</a>, the <a href="https://gist.github.com/1790826">messy end result</a> when using callbacks, and the things we&rsquo;d like to fix in order to get back to sanity:</p>

<ol>
<li>We can no longer use a simple call-and-return programming model</li>
<li>We can no longer handle errors using try/catch/finally</li>
<li>We must add callback and errback parameters to every function signature that might eventually lead to an asynchronous operation</li>
</ol>


<h1>Promises</h1>

<p>A Promise (aka Future, Delayed value, Deferred value) represents a value that is not yet available because the computation that will produce the value has not yet completed.  A Promise is a <em>placeholder</em> into which the successful result or reason for failure will eventually materialize.</p>

<p>Promises also provide a simple API (see note below) for being notified when the result has materialized, <em>or</em> when a failure has occured.</p>

<p>Promises are <a href="http://en.wikipedia.org/wiki/Futures_and_promises">not a new concept</a>, and have been implemented in many languages. While several implementations of the Promise concept in Javascript have been around for a while, they have started to gain more popularity recently as we start to build bigger, more complex systems that require coordinating more asynchronous tasks.</p>

<p>(NOTE: Although there are <a href="http://wiki.commonjs.org/wiki/Promises">several proposed</a> Promise API standards, <a href="http://wiki.commonjs.org/wiki/Promises">Promises/A</a> has been implemented in several major frameworks, and appears to be becoming the <em>defacto standard</em>. In any case, the basic concepts are the same: 1) Promises act as a placeholder for a result or error, 2) they provide a way to be notified when the actual result has materialized, or when a failure has occurred.)</p>

<h1>The Canonical XHR Example</h1>

<p>In the case of an XHR Get, the value we care about is the content of the url we&rsquo;re fetching.  We know that XHR is an asynchonous operation, and that the value won&rsquo;t be available immediately.  That fits the definition of a Promise perfectly.</p>

<p>Imagine that we have an XHR library that <em>immediately</em> returns a Promise, as a placeholder for the content, instead of requiring us to pass in a callback.  We could rewrite our asynchronous <code>thisMightFail</code> function from Part 1 to look like this:</p>

<p><script src="https://gist.github.com/1886889.js"></script></p>

<p>(Note that several popular Javascript libraries, including <a href="http://dojotoolkit.org/reference-guide/dojo/xhrGet.html">Dojo</a> (see also this <a href="http://dojotoolkit.org/documentation/tutorials/1.6/deferreds/">great article on Dojo&rsquo;s Deferred</a> by <a href="https://twitter.com/bryanforbes">@bryanforbes</a>) and <a href="http://api.jquery.com/Types/#jqXHR">jQuery</a>, implement XHR operations using promises)</p>

<p>Now, we can return the Promise placeholder <em>as if it were the real result</em>, and our asynchronous <code>thisMightFail</code> function looks very much like a plain old synchronous, call-and-return operation.</p>

<h1>Taking Back the Stack</h1>

<p>In a non-callback world, results and errors flow back <em>up</em> the call stack.  This is expected and familiar.  In a callback-based world, as we&rsquo;ve seen, results and errors no longer follow that familiar model, and instead, callbacks must flow <em>down</em>, deeper into the stack.</p>

<p>By using Promises, we can restore the familiar call-and-return programming model, and remove the callbacks.</p>

<h2>Restoring Call-and-return</h2>

<p>To see how this works, let&rsquo;s start with a simplified version of the <a href="https://gist.github.com/1790802">synchronous <code>getTheResult</code> function</a> from <a href="http://briancavalier.github.io/async-programming-part-1-its-messy">Part 1</a>, without try/catch so that exceptions will always propagate up the call stack.</p>

<p><script src="https://gist.github.com/1886893.js"></script></p>

<p>Now let&rsquo;s introduce the <em>asynchronous</em> <code>thisMightFail</code> from above that uses our Promise-based XHR lib.</p>

<p><script src="https://gist.github.com/1886896.js"></script></p>

<p>Using Promises, <code>getTheResult()</code> is identical in the synchronous and asynchronous cases!  And in both, the successful result <em>or the failure</em> will propagate <em>up</em> the stack to the caller.</p>

<h2>Removing Callbacks</h2>

<p>Notice also that there are no callbacks or errbacks (or alwaysbacks!) being passed down the callstack, and they haven&rsquo;t polluted any of our function signatures.  By using Promises, our functions now <em>look and act</em> like the familiar, synchronous, call-and-return model.</p>

<h2>Done?</h2>

<p>We&rsquo;ve used Promises to refactor our simplified <code>getTheResult</code> function, and fix two of the problems we identified in Part 1.  We&rsquo;ve:</p>

<ol>
<li>restored call-and-return</li>
<li>removed callback/errback/alwaysback parameter propagation</li>
</ol>


<p>But, what does this mean for callers of <code>getTheResult</code>?  Remember that we&rsquo;re returning a Promise, and eventually, either the successful result (the result of the XHR) or an error will materialize into the Promise placeholder, at which point the caller will want to take some action.</p>

<h1>What about the Caller?</h1>

<p>As mentioned above, Promises provide an API for being notified when either the result or failure becomes available.  For example, in the proposed Promises/A spec, a Promise has a <code>.then()</code> method, and many promise libraries provide a <code>when()</code> function that achieves the same goal.</p>

<p>First, let&rsquo;s look at what the calling code might look like when using the callback-based approach:</p>

<p><script src="https://gist.github.com/1886899.js"></script></p>

<p>Now, let&rsquo;s look at how the caller can use the Promise that <code>getTheResult</code> returns using the Promises/A <code>.then()</code> API.</p>

<p><script src="https://gist.github.com/1886909.js"></script></p>

<p>Or, more compactly:</p>

<p><script src="https://gist.github.com/1886911.js"></script></p>

<p><img src="http://briancavalier.s3.amazonaws.com/blog/funny-surprised-owl-WHAT.jpg" alt="WAT" /></p>

<p>(Image from <a href="http://themetapicture.com/wat/">The Meta Picture</a>)</p>

<p>Wasn&rsquo;t the whole point of this Promises stuff to <em>avoid using callbacks</em>?  And here we are using them?!?</p>

<h1>Stay with Me</h1>

<p>In Javascript, Promises are implemented using callbacks because there is no language-level construct for dealing with asynchrony.  Callbacks are a necessary <em>implementation detail</em> of Promises.  If Javascript provided, or possibly when it does provide in the future, other language constructs, promises could be implemented differently.</p>

<p>However, there are several important advantages in using Promises over the deep callback passing model from Part 1.</p>

<p>First, our function signatures are sane.  We have removed the need to add callback and errback parameters to every function signature from the caller down to the XHR lib, and only the caller who is ultimately interested in the result needs to mess with callbacks.</p>

<p>Second, the Promise API standardizes callback passing.  Libraries all tend to place callbacks and errbacks at different positions in function signatures.  Some don&rsquo;t even accept an errback.  <em>Most</em> don&rsquo;t accept an alwaysback (i.e. &ldquo;finally&rdquo;).  We can rely on the Promise API instead of <em>many potentially different library APIs</em>.</p>

<p>Third, a Promise makes a set of <em>guarantees</em> about how and when callbacks and errbacks will be called, and how return values and exceptions thrown by callbacks will be handled.  In a non-Promise world, the multitude of callback-supporting libraries and their many function signatures also means a multitude of different behaviors:</p>

<ol>
<li>Are your callbacks allowed to return a value?</li>
<li>If so, what happens to that value?</li>
<li>Do all libraries allow your callback to throw an exception?  If so, what happens to it?  Is it silently eaten?</li>
<li>If your callback does throw an exception, will your errback be called, or not?</li>
</ol>


<p>&hellip; and so on &hellip;</p>

<p>So, while one way to think of Promises is as a standard API to callback registration, they also provide standard, predictable <em>behavior</em> for how and when a callback will be called, exception handling, etc.</p>

<h1>What about try/catch/finally?</h1>

<p>Now that we&rsquo;ve restored call-and-return and removed callbacks from our function signatures, we need a way to handle failures.  Ideally, we&rsquo;d like to use try/catch/finally, or at least something that <em>looks and acts just like it</em> and works in the face of asynchrony.</p>

<p>In Part 3, we&rsquo;ll put the final piece of the puzzle into place, and see how to model try/catch/finally using Promises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Async Programming Part 1: It's Messy]]></title>
    <link href="http://briancavalier.github.io/async-programming-part-1-it-s-messy/"/>
    <updated>2012-02-10T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/async-programming-part-1-it-s-messy</id>
    <content type="html"><![CDATA[<h1>Exceptions and try/catch</h1>

<p>Exceptions and try/catch are an intuitive way to execute operations that may fail.  They allow us to recover from the failure, or to let the failure propagate up the call stack to a caller by either not catching the exception, or explicitly re-throwing it.</p>

<p>Here&rsquo;s a simple example:</p>

<p><script src="https://gist.github.com/1790802.js"></script></p>

<p>In this case, <code>getTheResult</code> handles the case where <code>thisMightFail</code> does indeed fail and throws an <code>Error</code> by catching the <code>Error</code> and calling <code>recoverFromFailure</code> (which could return some default result, for example).  This works because <code>thisMightFail</code> is <em>synchronous</em>.</p>

<h1>Going Async</h1>

<p>What if <code>thisMightFail</code> is <em>asynchronous</em>?  For example, it may perform an asynchronous XHR to fetch the result data:</p>

<p><script src="https://gist.github.com/1790814.js"></script></p>

<p>Now it&rsquo;s impossible to use try/catch, and we have to supply a callback and errback to handle the success and failure cases.  That&rsquo;s pretty common in Javascript applications, so no big deal, right?  But wait, now <code>getTheResult</code> <em>also</em> has to change:</p>

<p><script src="https://gist.github.com/1790818.js"></script></p>

<p>At the very least, <code>callback</code> (and possibly <code>errback</code>, read on) must now be added to <em>every function signature</em> all the way back up to the caller who is ultimately interested in the result.</p>

<h2>More Async</h2>

<p>If <code>recoverFromFailure</code> is also asynchronous, we have to add yet another level of callback nesting:</p>

<p><script src="https://gist.github.com/1790822.js"></script></p>

<p>This also raises the question of what to do if <code>recoverFromFailure</code> itself fails.  When using synchronous try/catch, <code>recoverFromFailure</code> could simply throw an <code>Error</code> and it would propagate up to the code that called <code>getTheResult</code>.  To handle an asynchronous failure, we have to introduce another <code>errback</code>, resulting in both <code>callback</code> and <code>errback</code> infiltrating every function signature from <code>recoverFromFailure</code> all the way up to a caller who must ultimately supply them.</p>

<p>It may also mean that we have to check to see if callback and errback were actually provided, and if they might throw exceptions:</p>

<p><script src="https://gist.github.com/1790826.js"></script></p>

<p>The code has gone from a simple try/catch to deeply nested callbacks, with <code>callback</code> and <code>errback</code> in every function signature, plus additional logic to check whether it&rsquo;s safe to call them, and, ironically, <em>two try/catch blocks</em> to ensure that <code>recoverFromFailure</code> can indeed recover from a failure.</p>

<h2>And what about finally?</h2>

<p>Imagine if we were also to introduce <code>finally</code> into the mix&mdash;things would need to become even more complex.  There are essentially two options, neither of which is as simple and elegant as the language-provided <code>finally</code> clause. We could: 1) add an <code>alwaysback</code> callback to all function signatures, with the accompanying checks to ensure it is safely callable, or 2) always write our callback/errback to handle errors internally, and be sure to invoke <code>alwaysback</code> in all cases.</p>

<h1>Summary</h1>

<p>Using callbacks for asynchronous programming changes the basic programming model, creating the following situation:</p>

<ol>
<li>We can no longer use a simple call-and-return programming model</li>
<li>We can no longer handle errors using try/catch/finally</li>
<li>We must add callback and errback parameters to every function signature that <em>might eventually</em> lead to an asynchronous operation</li>
</ol>


<p>We can do better. There is another model for asynchronous programming in Javascript that more closely resembles standard call-and-return, follows a model more like try/catch/finally, and doesn&rsquo;t force us to add two callback parameters to a large number of functions.</p>

<p>Next, we&rsquo;ll look at <strong>Promises</strong>, and how they help to bring asynchronous programming back to a model that is simpler and more familiar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOCSS slides and more from the jQuery Pgh meetup]]></title>
    <link href="http://briancavalier.github.io/oocss-slides-and-more-from-the-jquery-pgh-meetup/"/>
    <updated>2011-02-04T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/oocss-slides-and-more-from-the-jquery-pgh-meetup</id>
    <content type="html"><![CDATA[<p>I hope everyone who attended last night&rsquo;s jBurgh meetup had as much fun as I did, and enjoyed my talk on OOCSS.  I thought it was a great low-key event, and I have to say that the discussion after the presentation and hanging around talking to everyone were the best parts.</p>

<p>My <a href="http://slidesha.re/f2dc6r" title="OOCSS for Javascript pirates at jQueryPgh meetup">slides</a> are up on slideshare, and if you were at the meetup, I&rsquo;d really appreciate your taking a minute to <a href="http://spkr8.com/t/5513" title="OOCSS for JavaScript Pirates | SpeakerRate">rate my talk</a>, and (especially!) leave a comment about how it could be improved.</p>

<p>If you&rsquo;re interested in getting more background on OOCSS, I encourage you to check out Nicole&rsquo;s <a href="http://www.slideshare.net/stubbornella/object-oriented-css" title="Object Oriented CSS">slides</a> and <a href="http://www.stubbornella.org/content/2009/03/23/object-oriented-css-video-on-ydn/" title="Stubbornella  » Blog Archive   » Object Oriented CSS video on YDN">video</a>.  I&rsquo;ve also written a few articles that dig deeper into some of the concepts in last night&rsquo;s talk, such as OOCSS inheritance, why <code>.css()</code> is bad, and OOCSS Antipatterns:</p>

<ul>
<li><a href="http://blog.briancavalier.com/building-a-digital-clock-with-oocss-and-mvc" title="Building a digital clock with OOCSS and MVC - technorthodox">Building a digital clock with OOCSS and MVC</a></li>
<li><a href="http://blog.briancavalier.com/the-oo-in-oocss-and-direct-style-manipulation-0" title="The OO in OOCSS, and direct style manipulation - technorthodox">The OO in OOCSS, and direct style manipulation</a></li>
<li><a href="http://blog.briancavalier.com/oocss-antipatterns-analog-clock-theme-using-o" title="OOCSS Antipatterns: Analog clock theme using only CSS - technorthodox">OOCSS Antipatterns: Analog clock theme using only CSS</a></li>
</ul>


<p>You can also check out the <a href="http://briancavalier.com/digital-clock/" title="CSS3 Digital Clock">digital clock demo</a>, including these other versions:</p>

<ul>
<li><a href="http://briancavalier.com/digital-clock/analog/" title="CSS3 Digital Clock">Analog</a> &ndash; remember this is an antipattern (see above), no matter how cool it seems!</li>
<li><a href="http://briancavalier.com/digital-clock/explode.html" title="CSS3 Digital Clock">JQCon explode</a> &ndash; we did this mod live onstage at JQCon</li>
<li>Daniel Lamb&rsquo;s <a href="http://daniellmb.com/binary-clock.htm" title="MVC OOCSS Binary Clock">binary clock mod</a> &ndash; he points directly to my JS view controller (view source to check it out), and just modded the HTML and CSS.  Now that&rsquo;s separation of concerns FTW.</li>
</ul>


<p>For more deep diving along with some excellent code examples and comment discussion, I also recommend reading John Hann&rsquo;s post on <a href="http://unscriptable.com/index.php/2010/08/31/cujo-js-oojs-oocss-and-oohtml-part-1/" title="cujo.js — OOJS, OOCSS, and OOHTML — Part 1 (OOCSS for Engineers) | Unscriptable.com">OOCSS for Engineers</a>.</p>

<p>At the end of the presentation, I mentioned that I&rsquo;m working on OOCSS design patterns for web applications.  My plan is to post more information soon about the ones mentioned in the slides (with example code), as well as others, so stay tuned.</p>

<p>Thanks to <a href="http://twitter.com/#!/b4nn0n" title="Chris Bannon on Twitter">Chris Bannon</a> and <a href="http://wijmo.com/" title="Wijmo - jQuery UI Widgets">Wijmo</a> for organizing and sponsoring, to <a href="http://www.hackpittsburgh.org/" title="Hack Pittsburgh">HackPittsburgh</a> for lending us their space, and to everyone who attended!  I had a blast, and I&rsquo;m already looking forward to the next meetup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOCSS at the next jQuery Pgh meetup]]></title>
    <link href="http://briancavalier.github.io/oocss-at-the-next-jquery-pgh-meetup/"/>
    <updated>2011-01-31T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/oocss-at-the-next-jquery-pgh-meetup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ll be speaking about OOCSS at the next <a href="https://twitter.com/jquerypgh">jQuery Pittsburgh</a> meetup, this Thursday (2/3) at 6:30pm at <a href="http://www.hackpittsburgh.org" title="Hack Pittsburgh">HackPittsburgh</a>.  I&rsquo;m planning to present some similar material as John Hann and I presented at jQCon in September, but I&rsquo;ll also be including an expanded section on how to get started with OOCSS, as well as a section on OOCSS antipatterns.</p>

<p>Thanks to <a href="https://twitter.com/b4nn0n">Chris Bannon</a> from <a href="http://wijmo.com/" title="Wijmo - jQuery UI Widgets">Wijmo</a> for organizing the meetup, and for inviting me to speak.  Hope to see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple OOCSS Slideshows]]></title>
    <link href="http://briancavalier.github.io/simple-oocss-slideshows/"/>
    <updated>2011-01-21T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/simple-oocss-slideshows</id>
    <content type="html"><![CDATA[<p>I read <a href="http://www.computedstyle.com/2010/12/hiring-front-end-engineers.html" title="computed style: Hiring Front-End Engineers">this article</a> recently, and decided to solve the problem the author proposes in point #3 using OOCSS techniques.</p>

<p>Here you go: <a href="http://dl.dropbox.com/u/259524/code/slideshow/index.html" title="OOCSS Slideshows">OOCSS Slideshows</a>.</p>

<p>You might be saying, &ldquo;Good grief, all that CSS is overkill!&rdquo;, and be tempted to think that just using <code>image.style.display = 'none'</code> is good enough.  Try implementing those 3 effects in plain Javascript &hellip; you probably wouldn&rsquo;t get it right&mdash;I know I probably wouldn&rsquo;t.</p>

<p>Or maybe you&rsquo;re thinking that you&rsquo;d just use jQuery, Dojo, or your favorite effects library to do it.  Putting aside the fact that the original interview question stipulated no libraries, the advantage of an OOCSS approach, as I&rsquo;ve <a href="http://blog.briancavalier.com/the-oo-in-oocss-and-direct-style-manipulation-0" title="The OO in OOCSS, and direct style manipulation - technorthodox">written about at length before</a>, is separation of concerns, and all its related benefits.</p>

<p>Using an MVC and OOCSS approach <em>puts control of the slideshow transitions into the hands of the designer, and changes to the transitions require zero Javascript changes</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dojo completion statement parsing]]></title>
    <link href="http://briancavalier.github.io/dojo-completion-statement-parsing/"/>
    <updated>2010-11-29T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/dojo-completion-statement-parsing</id>
    <content type="html"><![CDATA[<p style="margin-top: 0px;">One of the things on my&nbsp;<a href="http://blog.briancavalier.com/textmate-dojo-completions-dojorequire-and-doj" title="TextMate Dojo completions: dojo.require and dojo.query - technorthodox" style="color: #0d2681; margin-top: 0px;">Dojo completion hitlist</a>&nbsp;was handling multiline statements, especially&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">dojo.query</code>&nbsp;chains, since I tend to break them into multiple lines when chaining more than 1 or 2&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">NodeList</code>&nbsp;function calls (and I&rsquo;m betting most folks do that, too). While thinking about how to handle this, I came to the conclusion that there were basically three ways I could approach it:</p>
<ol>
<li style="margin-top: 0px;">Implement a real Javascript parser that is liberal enough to handle incomplete statements (e.g. it has to handle the statement you&rsquo;re trying to complete!), or</li>
<li>Integrate an existing parser that is liberal enough to handle incomplete statements (I have no idea if a&nbsp;<em style="margin-top: 0px;">liberal</em>&nbsp;open source JS parser exists), or</li>
<li>Implement something simpler and easier that covers most or all of what I think of as&nbsp;<em style="margin-top: 0px;">common cases</em>.</li>
</ol>
<p>I decided to go with #3. In fact, this is my general rule of thumb for the completion bundle in the short and medium term. I want to make something that is both useful, and something I can actually release since I&rsquo;m only working on it a few hours each week. An unreleased, vaporware completion bundle is far less cool than a released one that works 80% of the time.</p>
<p>Here are a few shots of the multiline statement parser in action, completing a&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c; margin-top: 0px;">dojo.query</code>chain. Notice also, in the last shot, it guesses correctly that I am starting a new statement, even though I didn&rsquo;t end the previous one with a semicolon. However, it&rsquo;s not perfect, and will almost certainly break under less common conditions. I&rsquo;ve tried, though, to abstract the parser from the completion code in a way that allows the parser to be improved when I find cases where it breaks.</p>
<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-11-29-dojo-completion-statement-parsing/post3-1.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-29-dojo-completion-statement-parsing/post3-2.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-29-dojo-completion-statement-parsing/post3-3.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-29-dojo-completion-statement-parsing/post3-4.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-29-dojo-completion-statement-parsing/post3-5.png"></li></ol>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextMate Dojo completions: dojo.require and dojo.query]]></title>
    <link href="http://briancavalier.github.io/textmate-dojo-completions-dojo-require-and-dojo-query/"/>
    <updated>2010-11-16T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/textmate-dojo-completions-dojo-require-and-dojo-query</id>
    <content type="html"><![CDATA[<div>
<p style="margin-top: 0px;">Last week, I started thinking about what features I&rsquo;d want in the&nbsp;<a href="http://blog.briancavalier.com/dojo-autocomplete-for-textmate">TextMate&nbsp;Dojo&nbsp;completion bundle</a> in order to feel good about calling it releasable. I made a list, and started knocking them down. Here are a few that I managed to tackle over the past week:</p>
<ol>
<li style="margin-top: 0px;">It scans&nbsp;<em style="margin-top: 0px;">and executes</em>&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">dojo.require()</code>s in the current file and adds their symbols to the completion context.</li>
<li>It recognizes when you are typing&nbsp;<em style="margin-top: 0px;">inside</em>&nbsp;a&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">dojo.require()</code>&nbsp;and completes dojo package names instead of functions and properties.</li>
<li>It recognizes when you are in a&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c; margin-top: 0px;">dojo.query</code>&nbsp;chain and completes NodeList functions while you&rsquo;re in the chain.</li>
<li>Because it understands both&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c; margin-top: 0px;">dojo.require</code>&nbsp;and&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">dojo.query</code>, it will complete functions from NodeList mixins, such as&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">dojo.NodeList-fx</code>, that you&rsquo;ve&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c;">dojo.require</code>d in the current file.</li>
</ol>
<h2 style="color: #222222; text-shadow: #dddddd 3px 3px 5px;">How does it do that?</h2>
<p>In a word: Javascript. I&rsquo;ll be posting more about this later, once the first release is ready.</p>
<h2 style="color: #222222; text-shadow: #dddddd 3px 3px 5px;">A note about performance</h2>
<p>Any completion framework has to be fast. I&rsquo;m ruthless when it comes to development tools, and I&rsquo;ll bet you are too. If something slows me down, I stop using it. If the pain outweighs the benefits, it&rsquo;s gone. So, one of my goals is to make sure this bundle is as fast as it can be.</p>
<p>The current performance is very good on my laptop. The completion popup is nearly instantaneous, even with&nbsp;<code style="font-size: 12px; font-family: LuxiMono, Bitstream Vera Sans Mono, Monaco, Courier New, monospace; color: #1c360c; margin-top: 0px;">dojo.require</code>&nbsp;scanning, and hundreds of potential completions. That said, I&rsquo;m using the most recent MacBook Pro rev with 8g RAM and an SSD. I realize that may not be the most common setup, so I will be testing it with other setups to make sure it doesn&rsquo;t suck.</p>
<h2 style="color: #222222; text-shadow: #dddddd 3px 3px 5px;">I can haz it?</h2>
<p>A few folks have asked when they can get the bundle. Since it&rsquo;s a side project, I don&rsquo;t want to give a date. I&rsquo;ll release an initial version when I feel it&rsquo;s at the point that I&rsquo;d actually use it, and I can tell you that it&rsquo;s getting close :)</p>
<p>For now, here are a few more teasers that show the new stuff in action.</p>
</div>
<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/1.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/2.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/3.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/4.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/5.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/6.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-16-textmate-dojo-completions-dojo-require-and-dojo-query/7.png"></li></ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dojo Autocomplete for TextMate]]></title>
    <link href="http://briancavalier.github.io/dojo-autocomplete-for-textmate/"/>
    <updated>2010-11-08T00:00:00-05:00</updated>
    <id>http://briancavalier.github.io/dojo-autocomplete-for-textmate</id>
    <content type="html"><![CDATA[<p>One of the biggest complaints I hear about&nbsp;<a href="http://macromates.com" title="Macromates, makers of TextMate">TextMate</a>&nbsp;is that it doesn&#8217;t have some sort of native intellisense, and doesn&#8217;t do code completion. &nbsp;Those are typically features provided by &#8220;bigger&#8221; IDEs. &nbsp;TextMate started life as a text editor, and has had different goals than other IDEs, so even though TextMate has grown closer to full-blown IDE over the past few years (thanks to lots of great community bundle contributions), it&#8217;s not really hard to understand why it hasn&#8217;t provide those features natively.</p>
<p>It turns out, though, that TextMate provides some builtin help for rolling your own completions, and a lot of folks have done that for various languages and platforms. &nbsp;I decided to take a crack at it for&nbsp;<a href="http://dojotoolkit.org/" title="Dojo toolkit">Dojo</a>&nbsp;as a part of a new, simplified Dojo bundle I&#8217;ve been working on. &nbsp;Here are a couple teaser screenshots of what I have so far.</p>
<p>I&#8217;m not ready to post the bundle yet, but I&#8217;m actively working on it, so I hope to have an initial version ready within the next couple of weeks.</p>
<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-11-08-dojo-autocomplete-for-textmate/dojo-autocomplete1.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-08-dojo-autocomplete-for-textmate/dojo-autocomplete2.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-08-dojo-autocomplete-for-textmate/dojo-autocomplete3.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-11-08-dojo-autocomplete-for-textmate/dojo-autocomplete4.png"></li></ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOCSS Antipatterns: Analog clock theme using only CSS]]></title>
    <link href="http://briancavalier.github.io/oocss-antipatterns-analog-clock-theme-using-only-css/"/>
    <updated>2010-10-26T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/oocss-antipatterns-analog-clock-theme-using-only-css</id>
    <content type="html"><![CDATA[<p>You asked for it, and you got it.  Several people asked me after the digital clock demo at jQCon if I thought it was possible to create an analog theme for the clock using only CSS.  I had wondered this as well, but came to the conclusion that it was impossible, given the current HTML structure.  So, that&rsquo;s the answer I gave at the conference.</p>

<p>The very next day, I thought of a way to do it, so <a href="http://briancavalier.com/digital-clock/analog">here&rsquo;s an analog theme</a> (<a href="http://github.com/briancavalier/Sample-Code/tree/analog/digital-clock" title="digital-clock at analog from briancavalier's Sample-Code - GitHub">source on github</a>) for the digital clock done entirely in CSS.</p>

<p><script src="https://gist.github.com/645340.js"></script></p>

<p>First, note a couple things:</p>

<ol>
<li>The first hour, minute, and second digits are hidden.</li>
<li>The second hour, minute, and second digits have been styled to look like analog clock hands&mdash;i.e. long thin rectangles, and have been anchored at the center of the analog clock face.</li>
</ol>


<p>The key is the use (in fact, <em>abuse</em>, read on!) of the immediate sibling selector to rotate the clock hands to the correct position, using CSS3 transforms.  For example, the line above says when the first hour digit is a &ldquo;0&rdquo;, and the second hour digit is also a &ldquo;1&rdquo; rotate the second digit (remember, it&rsquo;s been styled to look like an analog clock hand) by 30°.  Each hour represents 30° (360 / 12 = 30), so looking at the rest of the hour selectors, you can see how it works.</p>

<p>Similarly, the minutes and seconds are rotated using the immediate sibling selector.  The only difference is the degrees, since 360 / 60 = 6° per minute/second.</p>

<p>Ok, neat, it works, but &hellip;</p>

<h2>How <em>not</em> to build an analog clock</h2>

<p>At this point, you&rsquo;re probably saying to yourself (and if you&rsquo;re not, <em>you should be</em>) &ldquo;This is a terrible way to build an analog clock&rdquo;.  You are absolutely right.  There are many problems with this, and I&rsquo;d even go so far as to call the whole thing an <a href="http://en.wikipedia.org/wiki/Anti-pattern" title="Anti-pattern - Wikipedia, the free encyclopedia">antipattern</a>.</p>

<p>From the HTML element hierarchy, to the CSS classnames, to the time computations, most everything tailored to represent an LED-based digital clock.</p>

<p>However, the point of this little exercise was not to find the best way to engineer an analog clock.  The point was to answer the question &ldquo;could it be done?&rdquo;.  But maybe we can learn something about OOCSS anyway.</p>

<h2>There is something to be learned here</h2>

<p>As the saying goes, &ldquo;when all you have is a hammer, everything looks like a nail&rdquo;, and in this case of trying to use <em>only</em> OOCSS to transform the digital clock into analog, there&rsquo;s certainly some overly-ambitious hammering going on.</p>

<p>If the HTML is poorly-suited to the task at hand, trying to apply OOCSS on top of it will probably just make things worse.  In fact, in this example, the HTML and CSS are fighting each other rather than working together.</p>

<p>OOCSS is not just about CSS, it&rsquo;s about <em>identifying objects in the view first</em> (<a href="http://slidesha.re/oocss-jqcon-slides" title="OOCSS for JavaScript Pirates jQCon Boston">as John said in our presentation, &ldquo;ignore the HTML!&rdquo;</a>), and then structuring HTML and CSS around the containers, content, identity, and states of those objects.</p>

<p>The fact is that the objects in this clock are LED digits, not analog clock hands, and some mildly clever CSS doesn&rsquo;t change that.  Conversely, this bastardization means that the hands of the analog clock have the classes &ldquo;display-area&rdquo; and &ldquo;digit&rdquo;, as well as &ldquo;d0&rdquo; &ndash; &ldquo;d9&rdquo;, none of which seem like logical choices for the hands of an analog clock!</p>

<p><strong>Antipattern</strong>: In any reasonably complex system, writing HTML and CSS first is an antipattern.</p>

<p><strong>What to do?</strong>: Break out the wireframes, gather around the whiteboard, and start identifying objects!  List their states.  Talk about ways to translate them into well-structured HTML containers and content.</p>

<p>One of the results of this object/HTML/CSS mismatch is <em>state explosion</em>, aka <a href="http://en.wikipedia.org/wiki/Combinatorial_explosion" title="Combinatorial explosion - Wikipedia, the free encyclopedia">combinatorial explosion</a>.  There are 72 CSS rules needed just to rotate the clock hands, whereas there are only 10 rules for the original digital clock LED digits.  That certainly qualifies as state explosion, and just looking at the analog rules should give you an uneasy feeling that something is wrong.</p>

<p>In fact, modeling any analog clock, not just this bad example of an analog clock, as discrete OOCSS states seems wrong.  Consider also the progress bar example John gave during our talk.  Progress bars, in most cases, represent a continuous function rather than a discrete function, and therefore can require an infinite number of states to model their possible values&mdash;e.g. 30%, 30.1%, 30.15%, and so on.</p>

<p><strong>Antipattern</strong>: Trying to model continuous values with OOCSS state is an antipattern.</p>

<p><strong>What to do?</strong>: Use a mechanism better suited to continuous values/functions, such as a vector library, or yes, even direct (but well abstracted!) style manipulation.</p>

<p>One other thing that should be bothering you about this analog clock is that nearly half the HTML elements are <em>permanently hidden</em> by the analog theme&rsquo;s CSS.  This can be an indication that you&rsquo;ve misidentified the view objects.  In this case, I think it&rsquo;s pretty obvious that the objects I originally identified when creating the digital clock, that is, active digits composed of lit or unlit LED bars, simply are not present in the analog clock.</p>

<p><strong>Antipattern</strong>: Having sections of permanently hidden HTML is an antipattern.</p>

<p><strong>What to do?</strong>: Review your objects and wireframes.  You may have misidentified some objects, or your application may have changed significantly enough over time that the objects you had originally, and correctly, identified are no longer present.  Either way, it&rsquo;s time to revisit the wireframes and refactor.</p>

<p>Trying to shoehorn an analog display into the digital clock was fun, but more importantly, I think it helped to identify some OOCSS antipatterns.  Hopefully these will help us all avoid some pitfalls!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Font-based digital clock theme using only CSS]]></title>
    <link href="http://briancavalier.github.io/font-based-digital-clock-theme-using-only-css/"/>
    <updated>2010-10-22T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/font-based-digital-clock-theme-using-only-css</id>
    <content type="html"><![CDATA[<p>Ever since Daniel posted his <a href="http://daniellmb.com/binary-clock.htm" title="MVC OOCSS Binary Clock">binary mod</a> of my digital clock, I&rsquo;ve been thinking about other ways to push the limits of the clock using only CSS.  At <a href="http://blog.briancavalier.com/oocss-for-javascript-pirates-at-jqcon-2010" title="OOCSS for Javascript Pirates at JQCon 2010 - technorthodox">JQCon</a>, I also talked to a few folks between sessions who had wondered the same thing.  So, I&rsquo;ve decided to give it a go.</p>

<p>One of the first ideas I had was to try to use fonts instead of the LED divs to show the clock digits.  So, <a href="http://briancavalier.com/digital-clock/" title="CSS3 Digital Clock">here you go</a>.</p>

<p>It turned out to be fairly easy, and required <em>zero changes</em> to the Javascript view controller.  The view controller simply passes the same messages to the view as it did before.  In other words, the view controller relies on a message-passing-based view API to which the OOCSS responds.  That API is unchanged in this version.  To verify, you can hop on over to Daniel&rsquo;s <a href="http://daniellmb.com/binary-clock.htm" title="MVC OOCSS Binary Clock">binary mod</a>, which references my JS directly, and see that it still works.</p>

<p>It also required only superficial changes to the HTML:</p>

<ol>
<li>I added the button for the new theme in the row of theme buttons.</li>
<li>I added &ldquo;hour&rdquo; and &ldquo;minute&rdquo; classes to the digits representing hours and minutes.  This change was not necessary to support the new font-based theme, but makes the hours and minutes consistent with the seconds, which already had the class &ldquo;second&rdquo;.</li>
</ol>


<p>The key changes were, of course, in the CSS, and here are some of the most relevant bits.</p>

<p><script src="https://gist.github.com/640955.js"></script></p>

<p>The comments pretty much say it all, but basically it hides the LEDs and then uses :before content to inject the font-based digits.</p>

<p>One thing I hadn&rsquo;t thought about before I actually ran it the first time, was that the &ldquo;1&rdquo; digit is much thinner than all the others, so I had to forcibly set a specific width for it (in both hours/minutes and the smaller seconds).  Without that specialization, the clock looks too sparse when there is a &ldquo;1&rdquo; (or several &ldquo;1&#8221;s) being displayed.  Yet another win for the OOCSS base and specialization pattern.</p>

<p>I think this theme looks pretty good (although I&rsquo;m still partial to the LEDs), but if you have suggestions for how to tweak it, I&rsquo;d love to hear them.  Also, if you have an idea for how to push the envelope, feel free to leave a comment, or <a href="http://twitter.com/briancavalier" title="@briancavalier">tweet it up</a>!</p>

<p>Stay tuned for more envelope pushing &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOCSS for Javascript Pirates at JQCon 2010]]></title>
    <link href="http://briancavalier.github.io/oocss-for-javascript-pirates-at-jqcon-2010/"/>
    <updated>2010-10-20T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/oocss-for-javascript-pirates-at-jqcon-2010</id>
    <content type="html"><![CDATA[<p>I had a lot of fun presenting OOCSS for Javascript Pirates with&nbsp;<a href="http://twitter.com/unscriptable">John Hann</a>&nbsp;at JQCon 2010 in Boston this past weekend. &nbsp;I came away feeling like the talk was very well received, and that people felt it was helpful. &nbsp;&nbsp;<a href="http://slidesha.re/oocss-jqcon-slides" title="OOCSS for Javascript Pirates Slides">The slides</a>&nbsp;and the&nbsp;<a href="http://briancavalier.com/digital-clock" title="OOCSS Digital Clock">digital clock</a>, including the&nbsp;<a href="http://briancavalier.com/digital-clock/explode.html" title="JQCon Explode Clock Mode">jqcon-explode mod</a>&nbsp;that we coded live during the talk are all up, as is Daniel Lamb&#8217;s&nbsp;<a href="http://daniellmb.com/binary-clock.htm" title="Binary Clock Mod">binary clock mod</a>.</p>
<p>If you want to read even more about OOCSS, you can also check out a few of our blog posts on the subject:</p>
<ul>
<li><a href="http://briancavalier.posterous.com/building-a-digital-clock-with-oocss-and-mvc">Building a digital clock with OOCSS and MVC</a></li>
<li><a href="http://unscriptable.com/index.php/2010/08/31/cujo-js-oojs-oocss-and-oohtml-part-1/">cujo.js &mdash; OOJS, OOCSS, and OOHTML &mdash; Part 1 (OOCSS for Engineers)</a></li>
<li><a href="http://briancavalier.posterous.com/the-oo-in-oocss-and-direct-style-manipulation-0">The OO in OOCSS, and direct style manipulation</a></li>
</ul>
<p>One of my favorite things about the conference was, as Paul Elliot (<a href="http://twitter.com/p_elliott">@p_elliott</a>) put it, the&nbsp;<em>hallway track</em>. &nbsp;I got to meet and talk with so many cool people between the sessions. &nbsp;John and I both had quite a few people tell us (in addition to a few good pirate jokes) that they had been thinking and doing some of the things from our talk, and they were glad to hear that other people were thinking many of the same things as validation that these techniques work. &nbsp;Hearing that was good validation for us as well.</p>
<p>I really appreciate all the feedback so far on the presentation, and on the digital clock as well, on which I have received many compliments. &nbsp;Thanks, everyone! &nbsp;If you haven&#8217;t already rated our talk, John and I both would really appreciate your feedback over at&nbsp;<a href="http://bit.ly/jqcon-oocss">SpeakerRate</a>.&nbsp;</p>
<p>I also have to say that overall, the conference showed how much energy there is in not only the jQuery community and the larger Javascript community, but also in front-end engineering as a whole. &nbsp;It&#8217;s a great time to be a front-end engineer.</p>
<p>Thanks to the jQuery team and the conference organizers for putting together and running an excellent conference. &nbsp;I had a blast. &nbsp;Nice job all around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Power of MVC: Binary Clock mod]]></title>
    <link href="http://briancavalier.github.io/the-power-of-mvc-binary-clock-mod/"/>
    <updated>2010-09-14T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/the-power-of-mvc-binary-clock-mod</id>
    <content type="html"><![CDATA[<p>When I created my digital clock, one of the things I wanted to show was how OOCSS and MVC could be used to provide a clean, clear separation of concerns between the View, i.e. HTML and CSS, and the View Controller, i.e. Javascript.  Along those lines, I had always intended for it to be possible to slap a different View onto the clock with no mods to the View Controller, but the proof is in the pudding, right?</p>
<p>Along came Daniel Lamb, who put that to the test, and created his spiffy&nbsp;<a href="http://daniellmb.com/binary-clock.htm">binary clock mod</a>.</p>
<p>He created a slightly modified View structure for the binary clock display in his HTML, and then cleverly applied OOCSS principles to inherit from my original OOCSS.  Most interestingly, though, notice that he didn&rsquo;t change a single line of code in the JS View Controller.  In fact, he <em>referenced my JS View Controller directly in his script tag</em>.  Because CSS classes are used as a message passing mechanism, and his View responds to the same messages, the binary clock works perfectly.</p>
<p>I&#8217;d like to thank&nbsp;<a href="http://twitter.com/daniellmb">Daniel</a> for creating such a cool mod and perfectly illustrating the powerful separation of concerns that OOCSS and MVC can provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The OO in OOCSS, and direct style manipulation]]></title>
    <link href="http://briancavalier.github.io/the-oo-in-oocss-and-direct-style-manipulation/"/>
    <updated>2010-09-08T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/the-oo-in-oocss-and-direct-style-manipulation</id>
    <content type="html"><![CDATA[<p>In my recent post,&nbsp;<a href="http://briancavalier.posterous.com/building-a-digital-clock-with-oocss-and-mvc" title="Building a digital clock with OOCSS and MVC">Building a digital clock with OOCSS and MVC</a>, I mentioned that I believe direct style manipulation is not a good engineering practice, and then promptly punted on explaining why until a later post. This was going to be that post, and then John Hann went and laid out many of the points I was going to make.</p>
<p>I have more I&rsquo;d like to add, so jump over to his post,&nbsp;<a href="http://unscriptable.com/index.php/2010/08/31/cujo-js-oojs-oocss-and-oohtml-part-1/">cujo.js &mdash; OOJS, OOCSS, and OOHTML &mdash; Part 1 (OOCSS for Engineers)</a>&nbsp;and come back. He specifically touches on direct style manipulation in the sections&nbsp;<a href="http://unscriptable.com/index.php/2010/08/31/cujo-js-oojs-oocss-and-oohtml-part-1#oocss-state">OOCSS State</a>&nbsp;and&nbsp;<a href="http://unscriptable.com/index.php/2010/08/31/cujo-js-oojs-oocss-and-oohtml-part-1#oocss-decreases-risk">OOCSS decreases risk</a>.</p>
<p>The major points he makes are that direct style manipulation:</p>
<ol>
<li>leads to complex branching code as runtime specialization and state inheritance becomes wider and deeper, as it does in real applications,</li>
<li>puts presentation logic in Javascript, thus thwarting many benefits of separation of concerns and expertise among the team of CSS designers and Javascript engineers,</li>
<li>tightly couples things that shouldn&rsquo;t be,</li>
<li>is usually less cpu-efficient than fully leveraging a good browser&rsquo;s CSS engine,</li>
</ol>
<p>These are great points, and I agree with them. &nbsp;I&rsquo;d like to expand on #s 1 and 2 a bit, and talk about a few other reasons in the context of the &ldquo;OO&rdquo; in OOCSS.</p>
<h2 style="font-size: 1.5em;">The OO in OOCSS</h2>
<p>Object-oriented means &ldquo;with a focus on objects&rdquo;. It is a way of thinking about a problem and how to structure potential solutions. There are programming languages, such as Java, C++, C#, and even Javascript, that provide features to make it easier to apply and enforce OO principles, but a good developer can apply these principles in any language.</p>
<p>Some of the fundamentals of OO are abstraction, inheritance, polymorphism, and encapsulation,&nbsp;<a href="http://en.wikipedia.org/wiki/Object-oriented_programming" title="OO Programming on Wikipedia">among others</a>. Yeah, they&rsquo;re all 30 point scrabble words, but more importantly, they are time-tested software engineering principles.</p>
<p>If OO means &ldquo;with a focus on objects&rdquo;, it seems logical to say OOCSS means, &ldquo;with a focus on CSS objects&rdquo;, and I believe there is a huge amount of value to be had in thinking of HTML and CSS as defining View Objects. I&rsquo;d love to write about how various OO principles apply to OOCSS, and maybe someday soon I will, but for now, I&rsquo;d like to look at how direct style manipulation violates two of them in particular: inheritance and encapsulation.</p>
<h2 style="font-size: 1.5em;">Inheritance</h2>
<p>I previously&nbsp;<a href="http://briancavalier.posterous.com/building-a-digital-clock-with-oocss-and-mvc">wrote about</a>&nbsp;the power of ancestor specializations and state changes affecting changes in descendants, and John goes into even more detail about it. Part of the reason it is so powerful is that it works in harmony with the &ldquo;C&rdquo; in CSS, the Cascade.</p>
<p>Using direct style manipulation logic essentially moves specialization and state inheritance from the CSS cascade to procedural Javascript. I think this is bad for two reasons:</p>
<ol>
<li>
<p>Duplicating the cascade moves the mechanism from the browser&rsquo;s super-fast style engine, to the fairly-fast-but-way-slower-than-the-browser Javascript VM. Don&rsquo;t think there&rsquo;s a difference? Check out&nbsp;<a href="http://scripty2.com/accel/">scripty2&rsquo;s comparison of hardware accelerated CSS3 transitions vs. Javascript-driven animation</a></p>
</li>
<li>
<p>Procedural code is less-easily checked by IDE&rsquo;s, and is more risky to change than declarative CSS rules. I&rsquo;d also argue that a well-organized set of CSS rules will visually communicate the cascade, and thus specialization order, more quickly and clearly than procedural branching. To draw an analogy with another popular OO language, which is faster and easier to get right: declaring a Java subclass via &ldquo;class MySubclass extends MySuperclass&rdquo; and letting the compiler do the heavy lifting, or writing the Java code that generates the bytecode for MySubclass?</p>
</li>
</ol>
<h2 style="font-size: 1.5em;">Encapsulation</h2>
<p>Encapsulation is the principle of bundling the state with operations that retrieve and modify that state, as well as the idea that&nbsp;<em>only those operations should access the state directly</em>. To put it in terms of objects, an object is responsible for maintaining and controlling access to its own state by exposing only those operations which other actors are allowed to perform on its state. &nbsp;The other actors in the system must send messages (via exposed operations) to an object to request state changes. The object itself elects how to affect the state change, or even whether to affect it at all.</p>
<p>Without this access control and message passing, it would be much easier to &ldquo;reach in&rdquo; and alter the internal state of an object, potentially corrupting it if you don&rsquo;t understand all the intricacies of its invariants. With access control, an object is protected against corruption, and your application is protected against a corrupted object wreaking havoc.</p>
<p>Most Object Oriented programming languages have built-in mechanisms for declaring access control and enforcing encapsulation, e.g. public, private, protected, and default or package-level access in Java. Even in Javascript, which is a much more malleable, you can use closures to achieve private encapsulation&mdash;different mechanism, similar effect.</p>
<p>There is no encapsulation mechanism built into HTML or CSS. The only mechanism that exists is&nbsp;<em>engineering diligence</em>.</p>
<h2 style="font-size: 1.5em;">Encapsulation, OOCSS, and View Objects</h2>
<p>The objects defined by OOCSS are View Objects. The HTML node ancestor/descendant relationships, in conjunction with the OOCSS specializations and state, define these objects. Their &ldquo;state&rdquo;, in the OO/encapsulation sense, is their style. For example, consider an HTML/OOCSS View Object that is a stylized button. It&rsquo;s encapsulated state may contain height, width, background-color, background-image, background-position (maybe using CSS sprites for button states), borders margins, padding, etc. These were probably carefully crafted by a CSS designer to produce a button that looks great and has interesting and useful visual cues on hover, when pressed, etc.</p>
<p>Javascript View Controllers contain logic about when View Objects should change state, and to what states they should change. When View Controllers use direct style manipulation, they are &ldquo;reaching in&rdquo; and directly changing the encapsulated state of View Objects, potentially corrupting their presentation state by breaking the layout and presentation invariants setup by the designer.</p>
<p>With enough time and care, a JS engineer could certainly duplicate the invariants across some or all possible presentation states, such as, in the case of a button, idle, :hover, and :active, but then would also have to account for other axes of change, such as browser differences (e.g. box model, rgba or hsl colors, opacity, transitions, etc.). The conditionals in the Javascript would start to add up, and probably produce horribly unmaintainable code. John showed in his&nbsp;<a href="http://unscriptable.com/index.php/2010/08/31/cujo-js-oojs-oocss-and-oohtml-part-1#oocss-decreases-risk">simple example</a>&nbsp;and the text that follows, how the branching could get to O(n^m) complexity.</p>
<p>Doing so would also spread the presentation details out into at least 2 places, the CSS and the Javascript (or more if the presentation is being modified in several places in the JS!). Each time the presentation needed to be modified, it would require looking in both places, and would probably require involving both the CSS designer and the Javascript engineer.</p>
<p>I&#8217;ll also point out again that this kind of conditional logic is essentially duplicating the cascade, which is a bad idea for the reasons I listed above.</p>
<h2 style="font-size: 1.5em;">OOCSS: The Right Tool for the Job</h2>
<p>CSS has a powerful inheritance mechanism in the cascade, and its declarative style, IMHO, provides a simple and expressive way to setup presentation across many view states. &nbsp;It is, in that regard, a declarative language for presentation state machines. The &ldquo;OO&rdquo; in OOCSS is a powerful way of thinking about HTML + CSS as View Objects, and gives designers and developers the right tools to declare and manage them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our new fountain]]></title>
    <link href="http://briancavalier.github.io/our-new-fountain/"/>
    <updated>2010-09-05T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/our-new-fountain</id>
    <content type="html"><![CDATA[We stopped by Gardener&#8217;s Eye, one of our favorite local shops, in the <br />early afternoon today and came home with this great cast concrete <br />fountain.<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-09-05-our-new-fountain/photo_2.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-05-our-new-fountain/photo_3.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-05-our-new-fountain/photo_1.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-05-our-new-fountain/photo_4.jpg"></li></ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some fun cruisers at the bike shop]]></title>
    <link href="http://briancavalier.github.io/some-fun-cruisers-at-the-bike-shop/"/>
    <updated>2010-09-04T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/some-fun-cruisers-at-the-bike-shop</id>
    <content type="html"><![CDATA[<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-09-04-some-fun-cruisers-at-the-bike-shop/photo_4.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-04-some-fun-cruisers-at-the-bike-shop/photo_3.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-04-some-fun-cruisers-at-the-bike-shop/photo_1.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-04-some-fun-cruisers-at-the-bike-shop/photo_2.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-09-04-some-fun-cruisers-at-the-bike-shop/photo_5.jpg"></li></ol>

<p>My dad and I stopped by Dirty Harry&#8217;s in Verona today because I <br />noticed they had a Trek belt-drive bike in the window a few weeks ago, <br />and I wanted to try it out. Unfortunately, it was already sold and <br />gone. So we just looked around for a bit, and noticed they had some <br />really cool cruisers. <p /> Oh, and an $8k Specialized S-Works. Ridiculous. Awesome, but <br />ridiculous. I think I like the cruisers better, anyway.</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We just planted 9 shrubs and 1 tree in 45 mins]]></title>
    <link href="http://briancavalier.github.io/we-just-planted-9-shrubs-and-1-tree-in-45-mins/"/>
    <updated>2010-08-30T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/we-just-planted-9-shrubs-and-1-tree-in-45-mins</id>
    <content type="html"><![CDATA[<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0008.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0009.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0010.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0011.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0012.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0013.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0014.jpg"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-30-we-just-planted-9-shrubs-and-1-tree-in-45-mins/IMG_0015.jpg"></li></ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a digital clock with OOCSS and MVC]]></title>
    <link href="http://briancavalier.github.io/building-a-digital-clock-with-oocss-and-mvc/"/>
    <updated>2010-08-30T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/building-a-digital-clock-with-oocss-and-mvc</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been thinking a lot about <a href="http://www.slideshare.net/stubbornella/object-oriented-css">OOCSS</a> and <a href="http://www.sitepen.com/blog/2009/08/28/mvc-in-the-browser/">MVC-in-the-browser</a> over the past months.  These certainly aren&rsquo;t things I invented, but what I found is that my own philosophy of building applications for the web had evolved to include these concepts.  It was only later that I learned that some really smart folks had also been thinking about these things, and had given them names.</p>

<p>So, I created this <a href="http://briancavalier.com/digital-clock">digital clock app</a> as a simple example of some of the concepts I have been applying to build apps with OOCSS and MVC.</p>

<p>Very shortly after that, I got a walkthrough of <a href="http://twitter.com/unscriptable">John (unscriptable) Hann&rsquo;s</a> ambitious <a href="http://cujojs.com">cujo.js</a> project,  and I was blown away by two things.  First, he and I had basically come to believe many of the same things about applying OOCSS and MVC, and second, he had actually wrapped those things up in an incredibly simple and intuitive API inside cujo.js.</p>

<p>Let&rsquo;s get down to business, and look at a few of these techniques in practice. I&rsquo;ll hope that some theory will fall out of it as I write.</p>

<h2>&ldquo;Is A&rdquo; and Specialization</h2>

<p>Here&rsquo;s a bit of HTML from the clock.</p>

<p><script src="https://gist.github.com/554193.js"></script></p>

<p>Some of the classes here set up &ldquo;is a&rdquo; relationships.  Even though the order of classes in HTML doesn&rsquo;t matter, I&rsquo;ve arranged them left to right from general to specific, because I think that makes the most sense.  The node &ldquo;is a&rdquo; slot&mdash;an admittedly awful name for an area in which the clock will display <em>something</em>.  Also, it &ldquo;is a&rdquo; digit, which in this case, is a specialization of slot that will display a digit.</p>

<p>Farther down, there is another specialization of digit:</p>

<p><script src="https://gist.github.com/554198.js"></script></p>

<p>This node is still a digit, but more specifically, it&rsquo;s a second, as opposed to a minute or hour.  Looking at the rendered clock, you can see that seconds are smaller than minutes and hours&mdash;the presentation of seconds has been specialized to be smaller.</p>

<h2>States, Views, and View Controllers</h2>

<p>If you watch the DOM while the clock is running you&rsquo;ll notice the digit nodes getting the classes d0 through d9.  Obviously, this is driven by Javascript.  That Javascript is acting as a <a href="http://developer.apple.com/iphone/library/featuredarticles/ViewControllerPGforiPhoneOS/AboutViewControllers/AboutViewControllers.html#//apple_ref/doc/uid/TP40007457-CH112-SW10">View Controller</a>.  The digit is the View, and the Javascript driving, or <em>controlling</em>, it is the View Controller.</p>

<p>The classes d0 &ndash; d9 represent the possible states that the digit may be in.  By changing the class, the View Controller is telling the View to change state.  The View still &ldquo;is a&rdquo; digit, but it has changed state, for example, from a zero to a one.  I guess you could say it &ldquo;was a&rdquo; zero and now it &ldquo;is a&rdquo; one, and that it&rsquo;s actually mutating to another specialization rather than changing state.  I think that&rsquo;s a reasonable way to think about it&mdash;it&rsquo;s just not how my brain works, so for me, it&rsquo;s state.</p>

<p>The digits and the state transitions manifest themselves in the browser with the help of CSS.  Here&rsquo;s a bit of the CSS.</p>

<p><script src="https://gist.github.com/554201.js"></script></p>

<p>This CSS describes what a digit looks like when it&rsquo;s in state d0 and d1.  In addition to describing the resulting state&rsquo;s presentation, it is also describing the state transition itself&mdash;that is, how (in the visual sense) the digit moves from one state to another using CSS3 transitions.</p>

<h2>Specializations, State, and Ancestry</h2>

<p>One thing that is subtle, but I feel is extremely important here, is that by changing the state of the digit, the state of the elements within the digit (i.e. the glowing bars) is being affected.  There are no direct state changes to the bars, yet they are changing.  The current state of each bar is defined by the hierarchy of classes above it in the DOM plus its own classes.  Or, to put it in more general terms:</p>

<p><strong>The current &ldquo;whole state&rdquo; (borrowing a term from a recent conversation with John) of a particular View is defined by the specializations and state of its ancestors plus its own specializations and state.</strong></p>

<p>There&rsquo;s no direct manipulation of nodes at the leaf level via Javascript.  I&rsquo;ll talk about why I believe doing direct style manipulation, such as <code>$.css</code> or <code>dojo.style</code>, is not a good engineering practice in another post, but, the key here is that by simply issuing a state transition on an enclosing View, state changes can be affected on its sub-Views.</p>

<p>Let&rsquo;s look at why that&rsquo;s interesting and useful on a practical level.</p>

<h2>Back to Practical</h2>

<p>So, the clock has a Javascript View Controller telling the View to change state which consequently alters the state of its sub-Views, HTML which is defining the structure of that View, and CSS that is describing the presentation of the states and the transitions between them.  IMHO, that&rsquo;s a very powerful separation of concerns.</p>

<p>Imagine you wanted to change the look of the digits by giving the bars beveled ends as some digital displays have, or you wanted to make the entire clock larger or small, or size it using percentages instead of pixels, or introducing a radical new presentation and color theme.  You would not need to touch the View Controller.  There are several reasons that is a good thing, IMHO, two of which are:</p>

<ol>
<li>The changes could be made by the team&rsquo;s CSS designer, without involving a JS engineer, and</li>
<li>Changing procedural code, like JS, is <em>typically more risky</em> than changing declarative code, like CSS.</li>
</ol>


<p>This separation of concerns provides similar benefits on the View Controller side.  When I decided to add support for 24 hour display, all I had to do (ignoring adding the new View components for selecting 12 or 24 hour time, and storing the preference) was to make a small change to the hour computation in the View Controller Javascript, issue slightly different state changes for the hour digits, and ensure that the AM or PM elements are always in the off state.</p>

<p>I didn&rsquo;t need to make any changes to the CSS or HTML.  Engineers can craft the JS, and the designers can craft the CSS.  Sure, you might play both roles, but that&rsquo;s not the case with every team, especially in large, complex apps, with many Views, company wide design standards, branding, and a small army of awesome designers complimented by an equally awesome army of software engineers.</p>

<p>I am very excited about building apps using these techniques, and I am especially excited after seeing John&rsquo;s work so far on cujo.js.  If it turns out to embody these concepts like I think it will, it&rsquo;s gonna be a very powerful platform.  I&rsquo;ll certainly be keeping an eye on it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3DC in 10k]]></title>
    <link href="http://briancavalier.github.io/css3dc-in-10k/"/>
    <updated>2010-08-26T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/css3dc-in-10k</id>
    <content type="html"><![CDATA[<p>I <a href="http://bit.ly/9smnZZ" title="10k Digital Clock">entered my digital clock</a> in the <a href="http://10k.aneventapart.com/" title="10k Apart">10k Apart challenge</a>. &nbsp;It keeps time and looks good too, all in less than 10k of HTML5, CSS, and JS. &nbsp;Go take a look, and if you like it, please vote it up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3DC gets a new home, 24hr time, localStorage, all in less code]]></title>
    <link href="http://briancavalier.github.io/css3dc-gets-a-new-home-24hr-time-localstorage-all-in-less-code/"/>
    <updated>2010-08-24T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/css3dc-gets-a-new-home-24hr-time-localstorage-all-in-less-code</id>
    <content type="html"><![CDATA[<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-08-24-css3dc-gets-a-new-home-24hr-time-localstorage-all-in-less-code/css3dc-1.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-24-css3dc-gets-a-new-home-24hr-time-localstorage-all-in-less-code/css3dc-2.png"></li>
<li><img src="http://briancavalier.github.io/imgs/2010-08-24-css3dc-gets-a-new-home-24hr-time-localstorage-all-in-less-code/css3dc-3.png"></li></ol>

<p>I decided to give the CSS3 digital clock <a href="http://briancavalier.com/digital-clock/" title="CSS3 Digital Clock">a new home</a>, and in the process, couldn&#8217;t help but hack on it a bit more. &nbsp;It has a setting for 12 or 24 hour time, and uses <a href="http://dev.w3.org/html5/webstorage/" title="Web Storage at W3C">localStorage</a> to remember both your 12/24 and color settings, so you can keep the time you want, in the color you want, whenever you want. &nbsp;Despite all of that, the HTML, CSS, and JS are a bit lighter and more streamlined now as well.</p>
<p>Oh, and it looks great as an OS X dashboard widget. &nbsp;You can use Safari&#8217;s web clip feature to snag it and put it on your dashboard!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mmmm, Plum]]></title>
    <link href="http://briancavalier.github.io/mmmm-plum/"/>
    <updated>2010-08-09T00:00:00-04:00</updated>
    <id>http://briancavalier.github.io/mmmm-plum</id>
    <content type="html"><![CDATA[<ol>
<li><img src="http://briancavalier.github.io/imgs/2010-08-09-mmmm-plum/love-plum.png"></li></ol>

<p>I&#8217;ve been a big fan of American Express for a while. &nbsp;So, when it came time to get a business credit card for my new company, I debated about whether to get a Plum Card or just go with the standard Amex Green, or Gold. &nbsp;Today I got to take advantage of one of the benefits of the Plum&#8211;pay early and get a cash refund. &nbsp;That&#8217;s right, not airline miles, or points that expire, but cash. &nbsp;So far, I&#8217;m happy with my choice.</p>
]]></content>
  </entry>
  
</feed>
